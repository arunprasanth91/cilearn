********************** BASIC UNIX COMMANDS *****************************
ls - list files in dir
cd - chnage dir 
cd / - root dir 
vi <FILENAME> - creates file in vi mode (most used)
i - for interactive mode ; :w to save 
pwd - currnet dir 
date - prints current date time 
ls -l -- long listing 
ls -a -- list hidden and unhidden files 
cp filename dir/copyfilename - copy files
cp -R dir copydir - copy dir 
man ls - returns manual for the ls 
man -k -s 1 print - returns instructions related to print
whatis ls - another way of finding instruction about a command 
whereis ls - return where the command is located. 
clear - to clear screen 
echo  "print something to screen"
echo  "print something to screen" >> file1 - appends text to the file. 
cat file1 - concatentates file content and prints 
cat file1 file2 - concatenates content of 2 files and prints 
cat -n file1 file2  - prints with line numbers 
more, less file1 - to print content; less is the most sophisticated way doesn't breaks and can navigate easily 
date -u - returns date time -u denotes timestammp
df -h -- returns disk space -h returns in human readable form
du -h -- returns disk utlization in human readable form 
chage -l <username> - know when user password will expire. 

**************** WORKING WITH SHELL *******************
#****************  WORKING WITH VARIABLES ********************
var = "AURN PRAANTH"
echo $var
by default var created will be available in only one workspace i.e if created in /bin dir 
for ex to be available in /bin2 --> export var then from /bin2 var can be accessible. 
************** USING PATH VARIABLE *******************************
PATH variable refers to the user dirs where the user has permission to execute the scripts stored on those dirs. 
In order to set some dir to PATH --> PATH=dev/bin2:$PATH -> if the dir has to be suffixed.

********************** JOB CONTROL ***********************
vi sample.txt -> INSERT MODE -> enter something -> CTRL+Z to come out of the text file 
if you type "jobs" and return it will show list of tasks which were stopped but not "closed"
type fg -> to resume the currently stopped job. fg 2 to resume 2nd job from the list. 
And, watch date  -> will display time in dynamic mode. To run in bg -> watch date& 
when jobs is executed -> also shows date command. 

**************** KILL A JOB ****************
To kill a job we need the process id -> to fetch process id type "ps" --> it will list all the jobs stopped/running in background with process id 
kill -l ==> list the different options can be used with kill command 
commanly used, kill -9 <PSID> 

**************************** REDIRECTING & PIPING *********************
REDIRECTING refers to redirect following to some other place. 
1. STDIN
2. STDOUT
3. STDERR 
by default when we execute "find /text" it will return OPTION-2 which is STDOUT; INCASE we need to get the error stored on to a file 
find /sample 3> ERRORS.txt
when u do vi ERRORS.txt --> it will display the errors from above command 
cat < file.txt > file1copy.txt --> redirecting the content of file.txt to new file. 
cat file.txt | grep "ARUN" | > result.txt --> redirecting & piping the search results to new file. 
********* HEAD & TAIL ******************
head -n 10 file.txt  --> returns the first 10 lines of the file content 
tail -n+1 file.txt --> skips 1st line and returns last 10 lines of the file content.
********** COUNT WORDS, LINES, CHARACTERS COUNT ************************
wc - returns the no of lines, words count, characters count 
head -n 10 file.txt | wc 

******************** SEARCHING THROUGH A FILE *****************
grep "PP" fruits.txt 
grep -i "pp" fruits.txt --> ignores case 
grep "\d{2}/\d{1,2}/\d{4} file.txt --> returns data having date with 2 digits 
grep -v "\d{2}/\d{1,2}/\d{4} file.txt --> invert match 
grep "(*?\d{2}/\d{1,2}/\d{4}){2}" file.txt --> finds 2 dates matching above criteria and returns those record. 
for more options on grep do man grep 

************************ comparing files **************************
diff file1 file2
to update diff from file2 to file1
diff file1 file2 | patch > patch.txt

********** COMPRESSING FILES **********
time gzip file.csv -> using with time command returns how much time it took to compress
time gunzip file.csv ->  to unzip 
time gzip -k file.csv ->  to keep the original file as well. 
time bzip2  file.csv -> another compression 
bunzip2 file.csv
zip -r dir_name -> -r recursive all files in the dir 

******** SEARCHING FILES *******************
find . -name "something" 
find . -not -name "something"
find . -E -regex 'file[[:digit:][2]]





