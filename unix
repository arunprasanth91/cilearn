Unix/Linux Command Reference
File Commands
1. ls Directory listing
2. ls -al Formatted listing with hidden files
3. ls -lt Sorting the Formatted listing by time modification
4. cd dir Change directory to dir
5. cd Change to home directory
6. pwd Show current working directory
7. mkdir dir Creating a directory dir
8. cat >file Places the standard input into the file
9. more file Output the contents of the file
10. head file Output the first 10 lines of the file
11. tail file Output the last 10 lines of the file
12. tail -f file Output the contents of file as it grows,starting with
the last 10 lines
13. touch file Create or update file
14. rm file Deleting the file
15. rm -r dir Deleting the directory
16. rm -f file Force to remove the file
17. rm -rf dir Force to remove the directory dir
18. cp file1 file2 Copy the contents of file1 to file2
19. cp -r dir1 dir2 Copy dir1 to dir2;create dir2 if not present
20. mv file1 file2 Rename or move file1 to file2,if file2 is an existing
directory
21. ln -s file link Create symbolic link link to file
Process management
1. ps To display the currently working processes
2. top Display all running process
Unix/Linux Command Reference 
3. kill pid Kill the process with given pid
4. killall proc Kill all the process named proc
5. pkill pattern Will kill all processes matching the pattern
6. bg List stopped or background jobs,resume a stopped
job in the background
7. fg Brings the most recent job to foreground
8. fg n Brings job n to the foreground
File permission
1. chmod octal file Change the permission of file to octal,which can
be found separately for user,group,world by
adding,
• 4-read(r)
• 2-write(w)
• 1-execute(x)
Searching
1. grep pattern file Search for pattern in file
2. grep -r pattern dir Search recursively for pattern in dir
3. command | grep
pattern
Search pattern in the output of a command
4. locate file Find all instances of file
5. find . -name filename Searches in the current directory (represented by
a period) and below it, for files and directories with
names starting with filename
6. pgrep pattern Searches for all the named processes , that
matches with the pattern and, by default, returns
their ID
System Info
1. date Show the current date and time
2. cal Show this month's calender
3. uptime Show current uptime
4. w Display who is on line
5. whoami Who you are logged in as
Unix/Linux Command Reference 
6. finger user Display information about user
7. uname -a Show kernel information
8. cat /proc/cpuinfo Cpu information
9. cat proc/meminfo Memory information
10. man command Show the manual for command
11. df Show the disk usage
12. du Show directory space usage
13. free Show memory and swap usage
14. whereis app Show possible locations of app
15. which app Show which applications will be run by default
Compression
1. tar cf file.tar file Create tar named file.tar containing file
2. tar xf file.tar Extract the files from file.tar
3. tar czf file.tar.gz files Create a tar with Gzip compression
4. tar xzf file.tar.gz Extract a tar using Gzip
5. tar cjf file.tar.bz2 Create tar with Bzip2 compression
6. tar xjf file.tar.bz2 Extract a tar using Bzip2
7. gzip file Compresses file and renames it to file.gz
8. gzip -d file.gz Decompresses file.gz back to file
Network
1. ping host Ping host and output results
2. whois domain Get whois information for domains
3. dig domain Get DNS information for domain
4. dig -x host Reverse lookup host
5. wget file Download file
6. wget -c file Continue a stopped download
Unix/Linux Command Reference 
Shortcuts
1. ctrl+c Halts the current command
2. ctrl+z Stops the current command, resume with fg in the
foreground or bg in the background
3. ctrl+d Logout the current session, similar to exit
4. ctrl+w Erases one word in the current line
5. ctrl+u Erases the whole line
6. ctrl+r Type to bring up a recent command
7. !! Repeats the last command
8. exit Logout the current session
Unix/Linux Command Reference 



********************** BASIC UNIX COMMANDS *****************************
ls - list files in dir
cd - chnage dir 
cd / - root dir 
vi <FILENAME> - creates file in vi mode (most used)
i - for interactive mode ; :w to save 
pwd - currnet dir 
date - prints current date time 
ls -l -- long listing 
ls -a -- list hidden and unhidden files 
cp filename dir/copyfilename - copy files
cp -R dir copydir - copy dir 
man ls - returns manual for the ls 
man -k -s 1 print - returns instructions related to print
whatis ls - another way of finding instruction about a command 
whereis ls - return where the command is located. 
clear - to clear screen 
echo  "print something to screen"
echo  "print something to screen" >> file1 - appends text to the file. 
cat file1 - concatentates file content and prints 
cat file1 file2 - concatenates content of 2 files and prints 
cat -n file1 file2  - prints with line numbers 
more, less file1 - to print content; less is the most sophisticated way doesn't breaks and can navigate easily 
date -u - returns date time -u denotes timestammp
df -h -- returns disk space -h returns in human readable form
du -h -- returns disk utlization in human readable form 
chage -l <username> - know when user password will expire. 

**************** WORKING WITH SHELL *******************
#****************  WORKING WITH VARIABLES ********************
var = "AURN PRAANTH"
echo $var
by default var created will be available in only one workspace i.e if created in /bin dir 
for ex to be available in /bin2 --> export var then from /bin2 var can be accessible. 
************** USING PATH VARIABLE *******************************
PATH variable refers to the user dirs where the user has permission to execute the scripts stored on those dirs. 
In order to set some dir to PATH --> PATH=dev/bin2:$PATH -> if the dir has to be suffixed.

********************** JOB CONTROL ***********************
vi sample.txt -> INSERT MODE -> enter something -> CTRL+Z to come out of the text file 
if you type "jobs" and return it will show list of tasks which were stopped but not "closed"
type fg -> to resume the currently stopped job. fg 2 to resume 2nd job from the list. 
And, watch date  -> will display time in dynamic mode. To run in bg -> watch date& 
when jobs is executed -> also shows date command. 

**************** KILL A JOB ****************
To kill a job we need the process id -> to fetch process id type "ps" --> it will list all the jobs stopped/running in background with process id 
kill -l ==> list the different options can be used with kill command 
commanly used, kill -9 <PSID> 

**************************** REDIRECTING & PIPING *********************
REDIRECTING refers to redirect following to some other place. 
1. STDIN
2. STDOUT
3. STDERR 
by default when we execute "find /text" it will return OPTION-2 which is STDOUT; INCASE we need to get the error stored on to a file 
find /sample 3> ERRORS.txt
when u do vi ERRORS.txt --> it will display the errors from above command 
cat < file.txt > file1copy.txt --> redirecting the content of file.txt to new file. 
cat file.txt | grep "ARUN" | > result.txt --> redirecting & piping the search results to new file. 
********* HEAD & TAIL ******************
head -n 10 file.txt  --> returns the first 10 lines of the file content 
tail -n+1 file.txt --> skips 1st line and returns last 10 lines of the file content.
********** COUNT WORDS, LINES, CHARACTERS COUNT ************************
wc - returns the no of lines, words count, characters count 
head -n 10 file.txt | wc 

******************** SEARCHING THROUGH A FILE *****************
grep "PP" fruits.txt 
grep -i "pp" fruits.txt --> ignores case 
grep "\d{2}/\d{1,2}/\d{4} file.txt --> returns data having date with 2 digits 
grep -v "\d{2}/\d{1,2}/\d{4} file.txt --> invert match 
grep "(*?\d{2}/\d{1,2}/\d{4}){2}" file.txt --> finds 2 dates matching above criteria and returns those record. 
for more options on grep do man grep 

************************ comparing files **************************
diff file1 file2
to update diff from file2 to file1
diff file1 file2 | patch > patch.txt

********** COMPRESSING FILES **********
time gzip file.csv -> using with time command returns how much time it took to compress
time gunzip file.csv ->  to unzip 
time gzip -k file.csv ->  to keep the original file as well. 
time bzip2  file.csv -> another compression 
bunzip2 file.csv
zip -r dir_name -> -r recursive all files in the dir 

******** SEARCHING FILES *******************
find . -name "something" 
find . -not -name "something"
find . -E -regex 'file[[:digit:][2]]







