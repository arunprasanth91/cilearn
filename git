# to initialize repository
git init 
# to clone repository
git clone -b <branch-name> repo-URL 
# config git 
git config --username ARUNP
git config --email arunprasanthp@yahoo.com

# to get current status 
git status

# to add files to working copy for commit 
git add <filename> ; git add . -- selects all the files in the staging directory 

#COMMMIT files from staging 
git commit -m "commit message"

#TO CREATE NEW BRANCH in LOCAL 
git branch -b <BRANCH_NAME> 
git checkout -c <BRANCH_NAME>

# to SWITCH BRANCH 
git branch <BRANCH_NAME>
git switch <BRANCH_NAME>

# TO PUSH CODE FROM NEW BRANCH TO REMOTE 
git push origin <BRANCH_NAME>

# TO UNSTAGE FILES FROM STAGED 
git restore --staged <FILENAMES>

# to revoke already committed change 
git reset HEAD`1
# HARD WAY 
git reset --- hard HEAD~2
# can also be achieved using the hash code 
git reset --hard 10b54asd2

# to pull the changes from remote 
git pull origin <BRANCH_NAME> 

# REBASE AND MERGE are same but REBASE is linear way of merging b/w multiple branches 
Rebasing is a process of combining a seq of commits to a new base commits -- to maintain linear project history.
SCENARIO: 
say master branch has 2 commits --> created new branch and made 4 more commits 
MASTER branch later got 3 more commits --> IN order to merge new branch with master 
In LOCAL, 
NORMAL MERGE 
git checkout master (switches to the master branch) 
git pull (updates remote code) 
git checkout newbranch
git merge master 

WITH REBASE 
git checkout master (switches to the master branch) 
git pull (updates remote code) 
git checkout newbranch
git rebase master -f  -- force mode (since it has to detach head)
git push 

# SQUASH COMMITS - combine two or more commits to single commits
git rebase -i HEAD~2 (how much commits has to be combined) -- SQUASH has to be done on interactive mode only 
to edit interactive mode press "i"
select which commits to PICK, SQUASH and enter ":wq"
additionally you can enter commit message as well 

# EDIT LAST COMMIT MESSAGE 
git commit --amend -m "EDITED MSG"

# CHANGES COMMITED on a commit 
git show <COMMITHASHCODE>

# COPY PARTICULAR COMMIT FROM ONE BRANCH TO ANOTHER 
git cherry-pick <COMMIT-HASH-CODE>
if there are conflicts resolve and git cherry-pick --continue
opens editor mode -> press "i" to update commit message and save ":wq"







